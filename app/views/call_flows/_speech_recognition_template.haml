%script{type: "text/html", id: "speech_recognition_step_template"}
  .feditor-sidebar.right.box.w28.iblock.h65

    %div{ko(:if => "is_editing_resource()")}
      %div{ko(template: "{name: 'resource_editor_template', data: current_editing_resource}")}

    .tableheader
      %span.left.i48grad-speech_recogition{ ko(css: '{ "orange": is_invalid }') }
      %input.ux-text.w20.right{ ko(value: 'name', valueUpdate: '"afterkeydown"', css: '{ "error": is_name_invalid }')}

    / %table.GralTable.TwoColumn.CleanTable.NoHead
    /   %tr
    /     %th= t('views.call_flows._record_step_template.label.messages')
    /     %th
    /   %tr
    /     %td{ko(css: "{ orange: is_explanation_resource_invalid }")}
    /       = t('views.call_flows._record_step_template.label.explanation')
    /       %span{ko(css: "{ alert: is_explanation_resource_invalid }")}
    /       %span{ko(text: "resource('explanation').display_name()")}
    /     %td
    /       %button.farrow{:type => "button", 'data-bind' => 'click: show_explanation_resource'}
    /   %tr
    /     %td{ko(css: "{ orange: is_confirmation_resource_invalid }")}
    /       = t('views.call_flows._record_step_template.label.confirmation')
    /       %span{ko(css: "{ alert: is_confirmation_resource_invalid }")}
    /       %span{ko(text: "resource('confirmation').display_name()")}
    /     %td
    /       %button.farrow{:type => "button", 'data-bind' => 'click: show_confirmation_resource'}

    %table.GralTable.TwoColumn.CleanTable.NoHead
      %tr
        %th= t('views.call_flows._capture_step_template.label.messages')
        %th
        %tr
          %td{ko(css: "{ orange: is_instructions_resource_invalid }")}
            = t('views.call_flows._capture_step_template.label.instructions')
            %span{ko(css: "{ alert: is_instructions_resource_invalid }")}
            %span{ko(text: "resource('instructions').display_name()")}
          %td
            %button.farrow{ :type => "button", 'data-bind' => 'click: show_instructions_resource' }
        %tr
          %td
            = t('views.call_flows._capture_step_template.label.invalid')
            %span{ko(text: "resource('invalid').display_name()")}
          %td
            %button.farrow{ :type => "button", 'data-bind' => "click: show_invalid_resource" }

    .content{ko('instedd_init' => true)}
      %hr
      .ux-nstep.w06
        %input{:type => 'number', :size => '2', 'data-bind' => 'value: timeout'}
      %span= t('views.call_flows._record_step_template.label.maximum_recording_time_in_second')
      %br
      
      .ux-nstep.w06
        %input{:type => 'number', :size => '2', 'data-bind' => 'value: silence_detection'}
      %span= t('views.call_flows._record_step_template.label.silence_detection')

      %br
      .ux-nstep.w06
        %input{:type => 'number', :size => '2', 'data-bind' => 'value: min_confidence'}
      %span= t('views.call_flows._record_step_template.label.min_confidence_acceptable')
      
      %br
      .ux-nstep.w06
        %input{ko(value: "number_of_attempts"),:type => 'number'}
        %button{:type => 'button', :class => 'kdown'}
        %button{:type => 'button', :class => 'kup'}
      = t('views.call_flows._capture_step_template.label.attempts')


      %br
      %select{'data-bind' => 'value: stop_key, options: available_keys()', 'style' => 'width: 60px;padding:2px;margin:2px;'}
      = t('views.call_flows._record_step_template.label.stop_recording_audio_with_key')

      %hr
      %div
        %label=t('views.call_flows._speech_recognition_step_template.label.store')
      / -----------------Store--------------------------------------------------------------------
      %div.row-block
        %div.label-block
          %span{ko(css: "{ alert: is_store_value_invalid }")}
          %label= t('views.call_flows._speech_recognition_step_template.label.audio') 
        %div.input-block
          %input.ux-text.ws12{ ko( value: 'store', initAutocomplete: {source: 'workflow.all_variables()'}, initMask: {mask: '$.mask.masks.token'}, valueUpdate: 'afterkeydown')}

      / -----------------Result 1--------------------------------------------------------------------
      %div.row-block
        %div.label-block
          %span{ko(css: "{ alert: is_result1_value_invalid }")}
          %label= t('views.call_flows._speech_recognition_step_template.label.store_result1')
        %div.input-block
          %input.ux-text.ws12{ ko( value: 'result1', initAutocomplete: {source: 'workflow.all_variables()'}, initMask: {mask: '$.mask.masks.token'}, valueUpdate: 'afterkeydown')}

      %div.row-block
        %div.label-block
          %span{ko(css: "{ alert: is_accuracy1_value_invalid }")}
          %label= t('views.call_flows._speech_recognition_step_template.label.store_accuracy1')
        %div.input-block
          %input.ws12.ux-text{ ko( value: 'accuracy1', initAutocomplete: {source: 'workflow.all_variables()'}, initMask: {mask: '$.mask.masks.token'}, valueUpdate: 'afterkeydown')}

      / ----------------Result 2----------------------------------------------------------------------

      %div.row-block
        %div.label-block
          %label= t('views.call_flows._speech_recognition_step_template.label.store_result2')
        %div.input-block
          %input.ux-text.ws12{ ko( value: 'result2', initAutocomplete: {source: 'workflow.all_variables()'}, initMask: {mask: '$.mask.masks.token'}, valueUpdate: 'afterkeydown')}

      %div.row-block
        %div.label-block
          %label= t('views.call_flows._speech_recognition_step_template.label.store_accuracy2') 
        %div.input-block
          %input.ws12.ux-text{ ko( value: 'accuracy2', initAutocomplete: {source: 'workflow.all_variables()'}, initMask: {mask: '$.mask.masks.token'}, valueUpdate: 'afterkeydown')}

      / -----------------Result 3---------------------------------------------------------------------
      %div.row-block
        %div.label-block
          %label= t('views.call_flows._speech_recognition_step_template.label.store_result3')
        %div.input-block
          %input.ux-text.ws12{ ko( value: 'result3', initAutocomplete: {source: 'workflow.all_variables()'}, initMask: {mask: '$.mask.masks.token'}, valueUpdate: 'afterkeydown')}

      %div.row-block
        %div.label-block
          %label= t('views.call_flows._speech_recognition_step_template.label.store_accuracy3') 
        %div.input-block
          %input.ws12.ux-text{ ko( value: 'accuracy3', initAutocomplete: {source: 'workflow.all_variables()'}, initMask: {mask: '$.mask.masks.token'}, valueUpdate: 'afterkeydown')}
    %br/  

    .bottom-actions
      %button.fdelete{ 'data-bind' => 'click: remove_with_confirm' }= t('views.call_flows._record_step_template.action.remove_this_step')
