%script{type: "text/html", id: "speech_recognition_step_template"}
  .feditor-sidebar.right.box.w28.iblock.h65

    %div{ko(:if => "is_editing_resource()")}
      %div{ko(template: "{name: 'resource_editor_template', data: current_editing_resource}")}

    .tableheader
      %span.left.i48grad-microphone{ ko(css: '{ "orange": is_invalid }') }
      %input.ux-text.w20.right{ ko(value: 'name', valueUpdate: '"afterkeydown"', css: '{ "error": is_name_invalid }')}

    %table.GralTable.TwoColumn.CleanTable.NoHead
      %tr
        %th= t('views.call_flows._record_step_template.label.messages')
        %th
      %tr
        %td{ko(css: "{ orange: is_explanation_resource_invalid }")}
          = t('views.call_flows._record_step_template.label.explanation')
          %span{ko(css: "{ alert: is_explanation_resource_invalid }")}
          %span{ko(text: "resource('explanation').display_name()")}
        %td
          %button.farrow{:type => "button", 'data-bind' => 'click: show_explanation_resource'}
      %tr
        %td{ko(css: "{ orange: is_confirmation_resource_invalid }")}
          = t('views.call_flows._record_step_template.label.confirmation')
          %span{ko(css: "{ alert: is_confirmation_resource_invalid }")}
          %span{ko(text: "resource('confirmation').display_name()")}
        %td
          %button.farrow{:type => "button", 'data-bind' => 'click: show_confirmation_resource'}

    .content
      %hr
      %label= t('views.call_flows._record_step_template.label.time')
      %br
      .ux-nstep.w06
        %input{:type => 'number', :size => '2', 'data-bind' => 'value: timeout'}
      %span= t('views.call_flows._record_step_template.label.maximum_recording_time_in_second')
      %br
      %hr
      %label= t('views.call_flows._record_step_template.label.properties')
      %br
      = t('views.call_flows._record_step_template.label.stop_recording_audio_with_key')
      %select{'data-bind' => 'value: stop_key, options: available_keys()'}
      %br/
      %hr


      %label=t('views.call_flows._speech_recognition_step_template.label.store')
      / -----------------Result 1--------------------------------------------------------------------
      %div
        %label= t('views.call_flows._speech_recognition_step_template.label.store_result1') + ":"
        %input.ux-text.ws12{ ko( value: 'result1', initAutocomplete: {source: 'workflow.all_variables()'}, initMask: {mask: '$.mask.masks.token'}, valueUpdate: 'afterkeydown')}
      %br/

      %div
        %label= t('views.call_flows._speech_recognition_step_template.label.store_accuracy1') + ":"
        %input.ws12.ux-text{ ko( value: 'accuracy1', initAutocomplete: {source: 'workflow.all_variables()'}, initMask: {mask: '$.mask.masks.token'}, valueUpdate: 'afterkeydown')}
      %br/

      / ----------------Result 2----------------------------------------------------------------------

      %div
        %label= t('views.call_flows._speech_recognition_step_template.label.store_result2') + ":"
        %input.ux-text.ws12{ ko( value: 'result2', initAutocomplete: {source: 'workflow.all_variables()'}, initMask: {mask: '$.mask.masks.token'}, valueUpdate: 'afterkeydown')}
      %br/

      %div
        %label= t('views.call_flows._speech_recognition_step_template.label.store_accuracy2') + ":"
        %input.ws12.ux-text{ ko( value: 'accuracy2', initAutocomplete: {source: 'workflow.all_variables()'}, initMask: {mask: '$.mask.masks.token'}, valueUpdate: 'afterkeydown')}
      %br/

      / -----------------Result 3---------------------------------------------------------------------
      %div
        %label= t('views.call_flows._speech_recognition_step_template.label.store_result3') + ":"
        %input.ux-text.ws12{ ko( value: 'result3', initAutocomplete: {source: 'workflow.all_variables()'}, initMask: {mask: '$.mask.masks.token'}, valueUpdate: 'afterkeydown')}
      %br/

      %div
        %label= t('views.call_flows._speech_recognition_step_template.label.store_accuracy3') + ":"
        %input.ws12.ux-text{ ko( value: 'accuracy3', initAutocomplete: {source: 'workflow.all_variables()'}, initMask: {mask: '$.mask.masks.token'}, valueUpdate: 'afterkeydown')}
      %br/
    %br/  

    .bottom-actions
      %button.fdelete{ 'data-bind' => 'click: remove_with_confirm' }= t('views.call_flows._record_step_template.action.remove_this_step')
