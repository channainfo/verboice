= form_for [call_flow.project, call_flow], :remote => true do |f|
  .field
    = f.label :name
    = f.text_field :name, :class => "w30"
  .field
    = f.label :mode
    %p.desc Choose whether you will use an external app or build one using Verboice
    .call_flow_mode
      = f.select :mode, options_for_select([['Use an external application', :callback_url], ['Design your app in Verboice', :flow]], call_flow.mode), {}, :class => "w30"
      = link_to "Go to Designer", edit_workflow_call_flow_path(call_flow), :class => 'button farrow flow_settings flow_settings' unless call_flow.new_record?
    .flow_settings
      = link_to 'Download call results as CSV', download_results_call_flow_path(call_flow, :format => :csv), :class => "button fimport" unless call_flow.new_record? || call_flow.user_flow.nil?

  .callback_url_settings
    = f.label :callback_url, 'URL'
    %br/
    = f.text_field :callback_url, :class => "w30"
    %br/
    = f.label :callback_url_user, 'User'
    %br/
    = f.text_field :callback_url_user, :class => "w30"
    %br/
    = f.label :callback_url_password, 'Password'
    %br/
    = f.password_field :callback_url_password, :class => "w30"

  - if OAuth2::Client.service_configured?(:google)
    %hr
    %p Fusion Tables
    %p.desc Enter a fusion table name and Verboice will create the table and store call results in real-time to it. Note that in case that the flow definition changes, Verboice might need to generate a fresh table with the new structure to store new results; in such case, Verboice will generate new tables using the name you provided and revision number.
    %p
      = f.check_box :store_in_fusion_tables, :class => "store_in_fusion_tables"
      = f.label "Store results of this call flow"
    .fusion_tables_settings
      = f.label :fusion_table_name, "Fusion Table name"
      %br
      = f.text_field :fusion_table_name, :class => 'w30'
      = link_to current_account.google_oauth_token.nil? ? 'Set your Google Account' : 'Change your Google Account', google_oauth_path(:redirect_back_to => project_call_flows_path(@project)), :class => 'button farrow'
  %hr
  - if call_flow.new_record?
    %button.white{:type => "submit"} Save
  - else
    %button.white{:type => "submit"} Update
  = link_to 'Cancel', '#', :class => "button white cancel #{call_flow.new_record? ? 'remove_unsaved_element' : 'collapse_trigger'}", :style => 'top: 1px;'
