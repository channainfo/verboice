- content_for :head do
  :javascript
    var distinct_variables = #{ @variables.to_json };
    var call_flow = #{ raw (@call_flow.user_flow || []).to_json };
    var external_steps = #{ @external_steps.to_json };
    var languages = #{ project_languages_json(@project) };
    var project_id = #{ @project.id };

    var menu_default_time_out_in_seconds = #{Parsers::UserFlowNode::Menu.default_time_out_in_seconds};
    var menu_default_number_of_attempts = #{Parsers::UserFlowNode::Menu.default_number_of_attempts};
    var capture_default_time_out_in_seconds = #{Parsers::UserFlowNode::Capture.default_time_out_in_seconds};
    var capture_default_number_of_attempts = #{Parsers::UserFlowNode::Capture.default_number_of_attempts};
    var capture_default_finish_key = "#{Parsers::UserFlowNode::Capture.default_finish_key}";
    var capture_default_minimum_input_lenght = #{Parsers::UserFlowNode::Capture.default_minimum_input_lenght};
    var capture_default_maximum_input_lenght = #{Parsers::UserFlowNode::Capture.default_maximum_input_lenght};

    var downloadURL = function downloadURL(url)
    {
        var iframe;
        iframe = document.getElementById("hiddenDownloader");
        if (iframe === null)
        {
            iframe = document.createElement('iframe');
            iframe.id = "hiddenDownloader";
            iframe.style.visibility = 'hidden';
            document.body.appendChild(iframe);
        }
        iframe.src = url;
    }

  - %W(external_step hang_up_step workflow_step capture_step menu_step play_step transfer_step goto_step branch_step record_step language_step text_localized_resource url_localized_resource record_localized_resource upload_localized_resource command_selector branch_option external_setting resource_editor).each do |template|
    = render "call_flows/#{template}_template"

= render 'shared/project_tabs_and_title', :project => @project

%h2= @call_flow.name
%p Use the following tool to define the application's call flow

= form_tag export_call_flow_path(@call_flow), :method => :get do
  %button.fimport Export Call flow
  = check_box_tag :export_audios
  include audio recordings

.ux-collapsible.collapsed.w40.file_upload{"data-on-expanded" => "box grey"}
  %span
    %a.button.fexport{:href => "#"} Import a new Call Flow:
  .ux-content
    = form_tag({:action => :import}, :multipart => true) do
      %hr
      = file_field_tag 'vrb', :label => 'Browse', :class =>'button white'
      %hr
      .right
        %button.grey{:type => "submit"} Upload
      .clear

%hr

= form_tag update_workflow_call_flow_path(@call_flow), :method => "PUT", :'data-bind' => "submit: serialize_workflow" do
  #wami
  #workflow
    #workflow-page
      %p.left.title.clickable{ 'data-bind' => 'click: show_new_step_selector' } Create new sub flow
      %div.right
        = hidden_field_tag 'flow', (@call_flow.user_flow || []).to_json
        %button.grey{:type => "submit"} Save
        = link_to 'Back', project_call_flows_path(@project), :class => "button white cancel", :style => 'top: 1px; margin-right: 15px'
      .clear
      .left
        .box.lightgrey.workflow
          .workflow-content-container.h65{ ko(workflow_steps: 'steps') }
      %span{ko(template: '{name: display_template_for, data: sidebar_content}')}
      .clear