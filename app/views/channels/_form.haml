= form_for(@channel, :html => {:autocomplete => 'off'}) do |f|
  - if @channel.errors.any?
    #error_explanation
      %h2
      = t('views.channels._form.errors.prohibited', :count => @channel.errors.count)
      %ul
        - @channel.errors.full_messages.each do |msg|
          %li= msg
  .field
    = f.label :name, t('views.channels._form.label.name')
    = f.text_field :name
  .field
    = f.label :call_flow_id, t('views.channels._form.label.call_flow')
    = f.select :call_flow_id, option_groups_from_collection_for_select(current_account.projects.includes(:call_flows), :call_flows, :name, :id, :name, @channel.call_flow_id)
  = f.hidden_field :type
  = render "form_#{@channel.class.name.split('::').last.underscore}", :f => f
  .actions
    %hr
    - if @channel.new_record?
      %button.white{:type => "submit"}= t('views.channels._form.action.save')
    - else
      %button.white{:type => "submit"}= t('views.channels._form.action.update')
    = link_to t('views.channels._form.action.cancel'), @channel, :class => "button white cancel #{@channel.new_record? ? 'remove_unsaved_element' : 'collapse_trigger'}", :style => 'top: 1px;'
